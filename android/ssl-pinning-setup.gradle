def findSslConfigFile() {
    def candidates = [
        file("${project.rootDir}/../ssl_config.json"), // repo root (android/ l√† th∆∞ m·ª•c con)
        file("${project.rootDir}/ssl_config.json"),    // android root
        file("${projectDir}/../../ssl_config.json"),   // monorepo fallback
        file("${projectDir}/../ssl_config.json")
    ]
    for (f in candidates) {
        if (f.exists()) return f
    }
    return null
}

def ensureAssetsDir() {
    def d = file("${projectDir}/src/main/assets")
    if (!d.exists()) d.mkdirs()
    return d
}

def assetsDir = file("${projectDir}/src/main/assets")
def destFile  = file("${projectDir}/src/main/assets/ssl_config.json")

plugins.withId('com.android.application') {

    // ===== AGP 7/8: androidComponents DSL =====
    if (project.extensions.findByName("androidComponents") != null) {
        androidComponents {
            onVariants(selector().all()) { variant ->   // <-- S·ª≠a ch·ªó n√†y
                def vName = variant.name
                def vNameCap = vName.substring(0,1).toUpperCase() + vName.substring(1)
                def taskName = "copySslConfig${vNameCap}"

                tasks.register(taskName, Copy) {
                    group = "SSL Pinning"
                    description = "Copy ssl_config.json to assets for ${vName}"

                    def sourceFile = findSslConfigFile()

                    onlyIf {
                        if (sourceFile) {
                            println "üìã SSL Config found: ${sourceFile.absolutePath}"
                            true
                        } else {
                            println "‚ö†Ô∏è SSL Config not found in expected locations"
                            false
                        }
                    }

                    doFirst {
                        ensureAssetsDir()
                        println "üîÑ Copying SSL config for variant: ${vName}"
                        println "üìÇ To: ${assetsDir}"
                    }

                    from { sourceFile }
                    into assetsDir

                    doLast {
                        if (destFile.exists()) {
                            println "‚úÖ SSL config copied: ${destFile} (${destFile.length()} bytes)"
                        } else {
                            println "‚ùå SSL config copy failed"
                        }
                    }
                }

                // Hook ch·∫Øc ch·∫Øn cho assemble/install/mergeAssets
                tasks.matching { it.name == "merge${vNameCap}Assets" }.configureEach { dependsOn taskName }
                tasks.matching { it.name == "install${vNameCap}" }.configureEach   { dependsOn taskName }
                tasks.matching { it.name == "assemble${vNameCap}" }.configureEach  { dependsOn taskName }
            }
        }

    } else {
        // ===== Fallback: API c≈© applicationVariants =====
        afterEvaluate {
            android.applicationVariants.all { variant ->
                def bt = variant.buildType.name
                def fl = variant.flavorName ?: ""
                def vNameCap = (fl ? "${fl.capitalize()}${bt.capitalize()}" : bt.capitalize())
                def taskName = "copySslConfig${vNameCap}"

                def copyTask = tasks.create(taskName, Copy) {
                    group = "SSL Pinning"
                    description = "Copy ssl_config.json to assets for ${vNameCap}"

                    def sourceFile = findSslConfigFile()

                    onlyIf {
                        if (sourceFile) {
                            println "üìã SSL Config found: ${sourceFile.absolutePath}"
                            true
                        } else {
                            println "‚ö†Ô∏è SSL Config not found in expected locations"
                            false
                        }
                    }

                    doFirst {
                        ensureAssetsDir()
                        println "üîÑ Copying SSL config for variant: ${vNameCap}"
                        println "üìÇ To: ${assetsDir}"
                    }

                    from { sourceFile }
                    into assetsDir

                    doLast {
                        if (destFile.exists()) {
                            println "‚úÖ SSL config copied: ${destFile} (${destFile.length()} bytes)"
                        } else {
                            println "‚ùå SSL config copy failed"
                        }
                    }
                }

                try {
                    if (variant.hasProperty("mergeAssetsProvider")) {
                        variant.mergeAssetsProvider.configure { dependsOn copyTask }
                    } else {
                        tasks.named("merge${vNameCap}Assets").configure { dependsOn copyTask }
                    }
                } catch (ignored) { }
                try { tasks.named("install${vNameCap}").configure { dependsOn copyTask } } catch (ignored) { }
                try { tasks.named("assemble${vNameCap}").configure { dependsOn copyTask } } catch (ignored) { }
            }
        }
    }

    // ===== Utility =====
    tasks.register("checkSslConfig") {
        group = "SSL Pinning"
        description = "Check SSL config file status"
        doLast {
            def source = findSslConfigFile()
            println "\nüìã SSL Pinning Configuration Status:"
            println "   Source config: " + (source ? "‚úÖ Found at ${source.absolutePath}" : "‚ùå Not found")
            println "   Assets config: " + (destFile.exists() ? "‚úÖ Found at ${destFile.absolutePath}" : "‚ùå Not found")
            if (!source) {
                println "üí° Create ssl_config.json t·∫°i repo root (ngang 'android/') ho·∫∑c trong 'android/'."
            } else if (!destFile.exists()) {
                println "üí° Run: ./gradlew copySslConfigDebug (ho·∫∑c bi·∫øn th·ªÉ t∆∞∆°ng ·ª©ng)"
            } else {
                println "‚úÖ SSL config is properly setup"
            }
        }
    }
}
