# Expo Conversion Implementation Flow

## ðŸŽ¯ 3-Phase Implementation Plan (5-6 Days Total)

---

## **Phase 1-2: Module Structure & Native Code Conversion**
*Timeline: 2-3 days*

### **Day 1: Project Setup & Structure**

#### Morning (2-3 hours)
- [ ] **1.1 Backup Current Implementation**
  ```bash
  git checkout -b expo-conversion-backup
  git add . && git commit -m "Backup before Expo conversion"
  git checkout -b feature/expo-support
  ```

- [ ] **1.2 Install Expo Dependencies**
  ```bash
  npm install expo@~50.0.0
  npm install --save-dev expo-module-scripts@^3.4.0 @expo/config-plugins@^7.0.0
  ```

- [ ] **1.3 Create Expo Module Configuration**
  ```bash
  # Create expo-module.config.json
  cat > expo-module.config.json << 'EOF'
  {
    "platforms": ["android", "ios"],
    "android": {
      "modules": ["expo.modules.usesslpinning.UseSslPinningModule"]
    },
    "ios": {
      "modules": ["UseSslPinningModule"]
    }
  }
  EOF
  ```

- [ ] **1.4 Update Package.json**
  - Update main entry: `"main": "build/index.js"`
  - Update types: `"types": "build/index.d.ts"`
  - Add expo platform config
  - Update scripts to use expo-module commands

#### Afternoon (3-4 hours)
- [ ] **1.5 Restructure Project Folders**
  ```bash
  # Create new folder structure
  mkdir -p android/src/main/java/expo/modules/usesslpinning
  mkdir -p ios/Sources/UseSslPinningModule
  mkdir -p plugin/src
  mkdir -p src
  ```

- [ ] **1.6 Create TypeScript Definitions**
  ```typescript
  // src/UseSslPinning.types.ts
  export interface SslPinningConfig {
    domains: {
      development: string;
      production: string;
    };
    sha256Keys: {
      [domain: string]: string[];
    };
  }

  export interface SslPinningResult {
    message: string;
    isEnabled: boolean;
    domains?: string[];
  }
  ```

- [ ] **1.7 Test Initial Setup**
  ```bash
  npm run build  # Should use expo-module build
  ```

---

### **Day 2: iOS Native Module Conversion**

#### Morning (3-4 hours)
- [ ] **2.1 Create iOS Expo Module**
  ```bash
  # Create ios/Sources/UseSslPinningModule/UseSslPinningModule.swift
  ```

- [ ] **2.2 Convert iOS Implementation**
  - Replace `@objc(UseSslPinning)` with Expo Module definition
  - Convert `RCTPromiseResolveBlock` to Expo `Promise`
  - Update method signatures for Expo modules
  - Keep existing TrustKit logic

- [ ] **2.3 Update iOS Podspec**
  ```ruby
  # ios/UseSslPinningModule.podspec
  Pod::Spec.new do |s|
    s.name = 'UseSslPinningModule'
    s.version = '1.0.0'
    s.summary = 'SSL Pinning Expo Module'
    s.dependency 'ExpoModulesCore'
    s.dependency 'TrustKit'
  end
  ```

#### Afternoon (2-3 hours)
- [ ] **2.4 Test iOS Module**
  ```bash
  cd example
  npx expo run:ios --device
  ```

- [ ] **2.5 Debug iOS Issues**
  - Check Xcode logs for compilation errors
  - Verify TrustKit integration
  - Test basic module loading

---

### **Day 3: Android Native Module Conversion**

#### Morning (3-4 hours)
- [ ] **3.1 Create Android Expo Module**
  ```bash
  # Create android/src/main/java/expo/modules/usesslpinning/UseSslPinningModule.kt
  ```

- [ ] **3.2 Convert Android Implementation**
  - Replace React Native bridge with Expo Module definition
  - Convert `ReactApplicationContext` to Expo context
  - Update promise handling for Expo modules
  - Keep existing OkHttp SSL pinning logic

- [ ] **3.3 Create Android Manifest**
  ```xml
  <!-- android/src/main/AndroidManifest.xml -->
  <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            package="expo.modules.usesslpinning">
  </manifest>
  ```

#### Afternoon (2-3 hours)
- [ ] **3.4 Update TypeScript Entry Point**
  ```typescript
  // src/index.ts
  import UseSslPinningModule from './UseSslPinningModule';
  
  export const setUseSSLPinning = (usePinning: boolean): void => {
    return UseSslPinningModule.setUseSSLPinning(usePinning);
  };
  ```

- [ ] **3.5 Test Android Module**
  ```bash
  cd example
  npx expo run:android --device
  ```

- [ ] **3.6 Verify Cross-Platform Compatibility**
  - Test on both iOS and Android
  - Verify all three main functions work
  - Check SSL configuration parsing

---

## **Phase 3: Expo Plugin Creation**
*Timeline: 1-2 days*

### **Day 4: Plugin Development**

#### Morning (3-4 hours)
- [ ] **4.1 Create Plugin Structure**
  ```bash
  mkdir -p plugin/src
  cd plugin
  npm init -y
  npm install @expo/config-plugins
  ```

- [ ] **4.2 Create Main Plugin File**
  ```typescript
  // plugin/src/index.ts
  import { ConfigPlugin } from '@expo/config-plugins';
  import { withAndroidSSLPinning } from './android';
  import { withIOSSSLPinning } from './ios';

  const withUseSslPinning: ConfigPlugin<SslPinningPluginOptions> = (config, options = {}) => {
    config = withAndroidSSLPinning(config, options);
    config = withIOSSSLPinning(config, options);
    return config;
  };

  export default withUseSslPinning;
  ```

- [ ] **4.3 Create Android Plugin Configuration**
  ```typescript
  // plugin/src/android.ts
  import { ConfigPlugin, AndroidConfig } from '@expo/config-plugins';

  export const withAndroidSSLPinning: ConfigPlugin<SslPinningPluginOptions> = (config, options) => {
    return AndroidConfig.Permissions.withPermissions(config, [
      'android.permission.INTERNET',
      'android.permission.ACCESS_NETWORK_STATE',
    ]);
  };
  ```

#### Afternoon (2-3 hours)
- [ ] **4.4 Create iOS Plugin Configuration**
  ```typescript
  // plugin/src/ios.ts
  import { ConfigPlugin, IOSConfig } from '@expo/config-plugins';

  export const withIOSSSLPinning: ConfigPlugin<SslPinningPluginOptions> = (config, options) => {
    // Add TrustKit dependency and configuration
    return config;
  };
  ```

- [ ] **4.5 Build Plugin**
  ```bash
  cd plugin
  npm run build
  ```

- [ ] **4.6 Test Plugin Integration**
  ```bash
  # In example app
  # Add plugin to app.json
  {
    "expo": {
      "plugins": ["../plugin"]
    }
  }
  
  npx expo prebuild --clear
  ```

---

## **Phase 4: Testing & Validation**
*Timeline: 1-2 days*

### **Day 5: Comprehensive Testing**

#### Morning (3-4 hours)
- [ ] **5.1 Create Test Expo App**
  ```bash
  npx create-expo-app@latest ssl-test-app
  cd ssl-test-app
  npm install ../react-native-ssl-manager
  ```

- [ ] **5.2 Test Basic Functionality**
  ```typescript
  // App.tsx
  import { initializeSslPinning, setUseSSLPinning, getUseSSLPinning } from 'react-native-ssl-manager';

  const testSSLPinning = async () => {
    try {
      await setUseSSLPinning(true);
      const isEnabled = await getUseSSLPinning();
      console.log('SSL Pinning enabled:', isEnabled);
      
      const result = await initializeSslPinning(JSON.stringify(sslConfig));
      console.log('Initialization result:', result);
    } catch (error) {
      console.error('Test failed:', error);
    }
  };
  ```

- [ ] **5.3 Test Development Build**
  ```bash
  npx expo run:ios
  npx expo run:android
  ```

#### Afternoon (2-3 hours)
- [ ] **5.4 Test EAS Build**
  ```bash
  eas build --platform ios --profile development
  eas build --platform android --profile development
  ```

- [ ] **5.5 Test Expo Go Limitation**
  ```bash
  npx expo start
  # Verify graceful failure with clear error message
  ```

- [ ] **5.6 Test Backward Compatibility**
  ```bash
  # Test with traditional React Native CLI project
  npx react-native init TestSSLCLI
  cd TestSSLCLI
  npm install ../react-native-ssl-manager
  npx react-native run-ios
  npx react-native run-android
  ```

---

### **Day 6: Final Validation & Documentation**

#### Morning (2-3 hours)
- [ ] **6.1 Security Testing**
  - [ ] Test with valid SSL certificates
  - [ ] Test with invalid SSL certificates
  - [ ] Test certificate pinning enforcement
  - [ ] Test with Proxyman (enabled vs disabled)

- [ ] **6.2 Performance Testing**
  - [ ] Measure initialization time
  - [ ] Test with multiple domains
  - [ ] Test configuration parsing speed

#### Afternoon (2-3 hours)
- [ ] **6.3 Update Documentation**
  - [ ] Update README.md with Expo instructions
  - [ ] Create migration guide
  - [ ] Update TypeScript definitions
  - [ ] Add plugin configuration examples

- [ ] **6.4 Prepare for Publishing**
  ```bash
  # Build final package
  npm run build
  
  # Test package installation
  npm pack
  cd test-app && npm install ../react-native-ssl-manager-1.1.0.tgz
  ```

- [ ] **6.5 Final Checklist Verification**
  - [ ] Works in Expo Development Build âœ“
  - [ ] Works in EAS Build âœ“
  - [ ] Fails gracefully in Expo Go âœ“
  - [ ] Backward compatible with RN CLI âœ“
  - [ ] All TypeScript types working âœ“
  - [ ] Plugin auto-configures dependencies âœ“

---

## **ðŸš¨ Common Issues & Quick Fixes**

### **Issue: Module not found**
```bash
# Clear cache and rebuild
rm -rf node_modules build
npm install
npm run build
```

### **Issue: iOS TrustKit not linking**
```bash
cd ios && pod install --repo-update
```

### **Issue: Android compilation errors**
```bash
cd android && ./gradlew clean
```

### **Issue: Expo prebuild fails**
```bash
npx expo prebuild --clear --no-install
```

---

## **ðŸ“‹ Daily Success Metrics**

### **Day 1 Success:**
- [ ] Project structure updated
- [ ] Dependencies installed
- [ ] Basic build working

### **Day 2 Success:**
- [ ] iOS module compiles
- [ ] iOS app launches
- [ ] Basic iOS functions work

### **Day 3 Success:**
- [ ] Android module compiles
- [ ] Android app launches
- [ ] Cross-platform functionality working

### **Day 4 Success:**
- [ ] Plugin builds successfully
- [ ] Plugin integrates with test app
- [ ] Auto-configuration working

### **Day 5 Success:**
- [ ] All test scenarios pass
- [ ] EAS builds successfully
- [ ] Backward compatibility verified

### **Day 6 Success:**
- [ ] Security tests pass
- [ ] Documentation complete
- [ ] Package ready for publishing

---

## **ðŸŽ‰ Post-Implementation Tasks**

- [ ] **Publish to NPM**
  ```bash
  npm version minor
  npm publish
  ```

- [ ] **Update GitHub**
  - Create release notes
  - Update repository README
  - Tag release version

- [ ] **Community Communication**
  - Announce Expo support
  - Update issue templates
  - Create migration examples
description:
globs:
alwaysApply: false
---
