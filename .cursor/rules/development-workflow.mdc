---
description: Development workflow and performance optimization guidelines
---

# Development Workflow and Performance Guidelines

## Development Phase SSL Management

### During Active Development
```typescript
// Disable SSL pinning for faster development cycles
await setUseSSLPinning(false);
// Enables API debugging, faster testing, and tool integration
```

### Before Production Deployment
```typescript
// Always enable SSL pinning for production builds
await setUseSSLPinning(true);
// Ensures maximum security in production environment
```

## Performance Optimization Strategies

1. **Development Mode**: Disable SSL pinning to minimize verification overhead
2. **Testing Mode**: Enable selectively for security-specific tests
3. **Production Mode**: Always enabled for maximum security
4. **Certificate Caching**: Use multiple certificates for rotation without downtime

## Cross-Platform Considerations

### Android Implementation
- Native Kotlin implementation in [android/src/main/java/com/usesslpinning/](mdc:android/src/main/java/com/usesslpinning/)
- Gradle configuration in [android/build.gradle](mdc:android/build.gradle)
- Proper ProGuard rules for release builds

### iOS Implementation  
- Swift/Objective-C bridge in [ios/UseSslPinning.swift](mdc:ios/UseSslPinning.swift)
- CocoaPods integration via [react-native-ssl-manager.podspec](mdc:react-native-ssl-manager.podspec)
- Proper Info.plist configuration for network security

## Required Dependencies Integration

### React Native Restart Integration
```bash
# Always install for proper SSL toggle functionality
npm install react-native-restart
cd ios && pod install  # iOS only
```

### User Experience Pattern
```typescript
const handleSSLToggle = async (enabled: boolean) => {
  // 1. Save application state
  await saveAppState();
  
  // 2. Update SSL pinning setting
  await setUseSSLPinning(enabled);
  
  // 3. Inform user about restart requirement
  Alert.alert(
    'Restart Required',
    'The app needs to restart to apply security changes.',
    [{ text: 'Restart Now', onPress: () => RNRestart.Restart() }]
  );
};
```

## Roadmap Awareness

### Upcoming Features to Consider
- **Expo Plugin Integration**: Native SSL pinning for Expo projects
- **Auto-linking**: Simplified setup process
- **Development Client Support**: Enhanced Expo development workflow

### Migration Preparation
- Keep configuration flexible for future Expo integration
- Structure code for easy plugin migration
- Document current implementation for upgrade path

## Security Best Practices

1. **Certificate Rotation**: Plan for regular certificate updates
2. **Environment Isolation**: Never mix development and production certificates
3. **Backup Strategy**: Always maintain multiple valid certificates
4. **Monitoring**: Log SSL pinning failures for security analysis
5. **Testing**: Regular security audits with tools like Proxyman
