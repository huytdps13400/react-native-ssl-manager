---
globs: *.json,ssl_config.json
description: SSL configuration file structure and testing workflows
---

# SSL Configuration and Testing Guidelines

## SSL Configuration File Structure (ssl_config.json)

Always follow this JSON structure for SSL configuration:

```json
{
  "domains": {
    "development": "api.dev.example.com",
    "production": "api.example.com"
  },
  "sha256Keys": {
    "api.dev.example.com": [
      "sha256/certificate-hash-1=",
      "sha256/certificate-hash-2="
    ],
    "api.example.com": [
      "sha256/certificate-hash-3=",
      "sha256/certificate-hash-4="
    ]
  }
}
```

## Configuration Best Practices

1. **Environment Separation**: Always maintain separate configurations for development and production
2. **Multiple Certificates**: Include multiple SHA256 hashes for certificate rotation
3. **Hash Format**: Use `sha256/` prefix and `=` suffix for certificate hashes
4. **Domain Mapping**: Map environment names to actual domain URLs

## Testing with Proxyman Integration

### Verification Workflow
```typescript
// 1. Enable SSL Pinning for security testing
await setUseSSLPinning(true);
// Requests should FAIL when intercepted by Proxyman

// 2. Disable SSL Pinning for debugging
await setUseSSLPinning(false);
// Now you can intercept and inspect API calls
```

### Common Test Scenarios
- **Security Verification**: SSL pinning enabled = Proxyman interception fails
- **API Debugging**: SSL pinning disabled = Full traffic inspection possible
- **Certificate Validation**: Verify SHA256 hashes match server certificates
- **Environment Testing**: Test both development and production endpoints

## Development Workflow Benefits

### For Developers
- Quick toggling between secure and debug modes
- Performance optimization during development
- Flexible multi-environment configuration

### For QA Teams
- Efficient security testing
- Easy API behavior verification
- Seamless environment switching

### Certificate Management
- Store production certificates securely
- Regularly update certificates before expiration
- Maintain backup certificates for rotation
- Test certificate changes in development first
